# ==============================================LESSON28==============================================
# Примеры встроенных функций - abs, sum, max
# Примеры модулей random (randInt, choice), math (ceil, floor)
# Создание функции без аргументов и его использование
# Создание функции с аргументами и его использование. Понятие параметра
# Возвращение значений в функциях. Несколько return
import sys

import unicodedata


# num = -5
# temp = abs(num)
# print(temp)

# my_list = [1, 2, 3, 4, 5]
# sum_list = sum(my_list)
# print(sum_list)

# my_list = [5, 6, 3, 100, 2]
# max_elem = max(my_list)
# print(max_elem)


# from random import randint, choice
#
# for i in range(5):
#     num = randint(1, 100)
#     print(num, end="\t")
#
#
# my_list = ["Bob", "Tom", "Jim", "Kid"]
# for i in range(5):
#     selected = choice(my_list)
#     print(selected, end="\t")


# from math import ceil, floor
#
# my_list = [26, 12, 14, 3, 1]
# sum_list = sum(my_list)
# size_list = len(my_list)
# result = sum_list / size_list
# result_ceil = ceil(result)
# result_floor = floor(result)
# print(result, result_ceil, result_floor)


# def print_welcome():
#     print("Добро пожаловать в программу!")
#     print("Эта программа выводит текст")
#
#
# print_welcome()


# def draw_square():
#     for i in range(5):
#         print("*" * 5)
#
#
# draw_square()


# def calculate(num_1, num_2):
#     print(f"{num_1} + {num_2} = {num_1 + num_2}")
#     print(f"{num_1} - {num_2} = {num_1 - num_2}")
#     print(f"{num_1} * {num_2} = {num_1 * num_2}")
#     print(f"{num_1} / {num_2} = {num_1 / num_2}")
#     print(f"{num_1} % {num_2} = {num_1 % num_2}")
#     print(f"{num_1} // {num_2} = {num_1 // num_2}")
#     print(f"{num_1} ** {num_2} = {num_1 ** num_2}")
#     print()
#
#
# first_num = 2
# second_num = 4
# calculate(first_num, second_num)
# calculate(2, 6)
# calculate(10, 10)


# ====================================================================================================
# ПЗ 28.1 - 28.2
# ====================================================================================================


# def max_num(num_1, num_2):
#     if num_1 > num_2:
#         result = num_1
#     else:
#         result = num_2
#     return result
#
# maximum = max_num(1, 5)
# print(maximum)
#


# ====================================================================================================
# ПЗ 28.3 - 28.7
# ====================================================================================================


# ==============================================LESSON29==============================================
# Сигнатура функции
# Упаковка - передача нескольких аргументов в один параметр
# Распаковка аргументов перед их передачей
# Аргументы по умолчанию
# Передача аргументов по ключам
# Расположение обязательных, упаковки, необязательных параметров


# def print_hello() -> None:
#     print("Hello")


# def print_msg(message: str) -> None:
#     print("Your message is \"{0}\"".format(message))


# def print_msg_to(message: str, name: str) -> None:
#     print("This message for {1}:\n{0}".format(message, name))


# def code_to_message(code: int) -> str:
#     if code == 200:
#         msg = "OK"
#     elif code == 404:
#         msg = "Not Found"
#     elif code == 408:
#         msg = "Request Timeout"
#     elif code == 503:
#         msg = "Service Unavailable"
#     else:
#         msg = "Unknown Code"
#     return msg


# print_hello()
# print_msg("Some text")
# print_msg_to("Жду от тебя ответа", "Джим")
#
# message = code_to_message(404)
# print(message)

# ====================================================================================================

# def total_sum(nums):
#     num_sum = 0
#     for num in nums:
#         num_sum += num
#     return num_sum
#
#
# num_list = [10, 20, 30, 40, 50]
# result = total_sum(num_list)
# print(result)


# def total_sum(*nums):
#     num_sum = 0
#     for num in nums:
#         num_sum += num
#     return num_sum
#
#
# result = total_sum(10, 20, 30, 40, 50)
# print(result)
#
# num_list = [10, 20, 30, 40, 50]
# result = total_sum(*num_list)
# print(result)

# ====================================================================================================

# def show_data(name: str, age=0, group="Unknown") -> None:
#     print(f"Name: {name}\t\tAge: {age}\t\tGroup: {group}")
#
#
# show_data("Tom", 18, "233BC_Python")
# # show_data()
# show_data("Jacob")
# show_data("Jim", 25)
# show_data(age=15, group="Python", name="Tom")


# def show_data(name: str, *groups: str, work="No") -> None:
#     print("Name: {}".format(name))
#     print("Groups:")
#     for group in groups:
#         print("\t{}".format(group))
#     print("Work: {}".format(work))
#
#
# show_data("Tom", "Python 10:00", "Python 13:00", "Python 19:00", work="QA Tester")


# ====================================================================================================
# ПЗ 29.1 - 29.4
# ====================================================================================================


# ==============================================LESSON30==============================================
# Local, Enclosing, Global, Built-In - LEGB
# Локальные и глобальные переменные


# Local
# def func(num):
#     num += 10
#     print(num)
#
# func(5)


# Global
# glob_num_1 = 10
# glob_num_2 = 20
# glob_list = list()
# def func():
#     num = 1
#     print(glob_num_1 + num)
#
#     global glob_num_2
#     glob_num_2 += num
#
#     glob_list.append("TEST")
#
#
# func()
# print(glob_num_1, glob_num_2, glob_list)


# Enclosing
# def outer_function(num_2):
#     num_1 = 1  # Enclosing область для func
#
#     def func(num):  # Closure/Замыкание
#         print(num_1, end="\t")
#
#         nonlocal num_2
#         num_2 += num
#         print(num_2)
#
#     return func
#
#
# inner_func = outer_function(2)  # Closure object
# inner_func(10)
# inner_func(10)
# inner_func(10)


# Built-in
# print("global:", len("Hello World"))
# def outer_function():
#     print("outer_function:", len("Hello World"))
#
#     def func():
#         print("func:", len("Hello World"))
#
#     func()
#
#
# outer_function()


# ====================================================================================================
# ПЗ 30.1 - 30.3
# ====================================================================================================


# ==============================================LESSON31==============================================
# Объекты первого класса или динамически созданные объекты
# Передача и возвращение функций как объектов - функции высших порядков


# Пример объектов первого класса
# def hello(msg) -> None:
#     print("Hello", msg)
#
#
# def goodbye(msg) -> None:
#     print("Goodbye", msg)
#
#
# say = hello
# say()
#
# say = goodbye
# say()
#
# print_smthg = [hello, goodbye]
#
# for func in print_smthg:
#     func("Teston")


# Пример функций высшего порядка
# def default_indexes(obj_list: list):
#     return range(0, len(obj_list), 1)  # range(0, 10, 1) -> (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
#
#
# def reverse_indexes(obj_list: list):
#     return range(len(obj_list) - 1, -1, -1)
#
#
# def even_indexes(obj_list: list):
#     return range(0, len(obj_list), 2)  # (0, 2, 4, 6, 8)
#
#
# def odd_indexes(obj_list: list):
#     return range(1, len(obj_list), 2)
#
#
# def print_list(obj_list: list, order):  # Функция высшего порядка, т.к. принимает функцию
#     for i in order(obj_list):
#         print(obj_list[i], end=" ")
#     print()
#
#
# nums = [25, 30, 35, 40, 45, 50, 55, 60, 65, 70]
# print_list(nums, default_indexes)
# print_list(nums, reverse_indexes)
# print_list(nums, even_indexes)
# print_list(nums, odd_indexes)


# def oper_sum(num_1, num_2):
#     return num_1 + num_2
#
#
# def oper_dif(num_1, num_2):
#     return num_1 - num_2
#
#
# def oper_prod(num_1, num_2):
#     return num_1 * num_2
#
#
# def oper_choice(oper):  # Функция высшего порядка, т.к. возвращает функцию
#     choice = None
#     if oper == "+":
#         choice = oper_sum
#     elif oper == "-":
#         choice = oper_dif
#     elif oper == "*":
#         choice = oper_prod
#     return choice
#
#
# first = 20
# second = 15
# for operation_symbol in ["+", "-", "*"]:
#     operation = oper_choice(operation_symbol)
#     result = operation(first, second)
#     print(result)


# ====================================================================================================
# ПЗ 31.1 - 31.2
# ====================================================================================================


# ==============================================LESSON32==============================================
# Рекурсия
# Функциональное программирование


# def func(count):
#     if count <= 0:
#         print("END")
#     else:
#         print(count)
#         func(count - 1)
#
#
# func(5)


# ====================================================================================================
# ПЗ 32.1 - 32.5
# ====================================================================================================


# def my_greeting1():
#     print("Good morning! Have a nice day!")
#
#
# def my_greeting2():
#     print("Good day! Nice to see you!")
#
#
# def my_greeting3():
#     print("Hey! Long-time no see.")
#
#
# def my_greeting4():
#     print("Good night! See you tomorrow.")
#
#
# def greeting_recipient(greet_function):
#     print("Dear,", input("Your name: "))
#     greet_function()
#     print()
#
#
# for my_greeting in (my_greeting1, my_greeting2, my_greeting3, my_greeting4):
#     greeting_recipient(my_greeting)


# ==============================================LESSON33==============================================
# Карринг
# Декораторы
# Решение задач с использованием своих функций
# ПОКАЗАТЬ ПРИМЕР КАК В ЛУА ЧТЕНИЕ ФАЙЛОВ


# def send_msg(user_to, msg_txt):
#     print("Dear {}, welcome to the Python! {}".format(user_to, msg_txt))
#
#
# send_msg("admin", "Have a nice day!")
# send_msg("admin", "See you!")
# send_msg("admin", "Good luck!")
# send_msg("student", "Good luck!")
# print()
#
# def send_msg_to(user_to):  # Каррированный вариант
#     def set_msg(msg_txt):
#         print("Dear {}, welcome to the Python! {}".format(user_to, msg_txt))
#     return set_msg


# send_msg_admin = send_msg_to("admin")
# send_msg_admin("Have a nice day!")
# send_msg_admin("See you!")
# send_msg_admin("Good luck!")

# send_msg_student = send_msg_to("student")
# send_msg_student("Good luck!")

# send_msg_to("admin")("Have a nice day!")


# def simple_decorator(func):  # Декоратор
#     def simple_wrapper():  # Обёртка
#         print("====================")
#         func()
#         print("====================")
#
#     print("WORKING DECORATOR")
#     return simple_wrapper
#
#
# def print_message():
#     print("Hello")
#
#
# show_message = simple_decorator(print_message)
# show_message()
#
#
# @simple_decorator
# def print_message():
#     print("Hello")
#
#
# print_message()


# def simple_decorator(func):
#     def simple_wrapper(*args):
#         print("====================")
#         func(*args)
#         print("====================")
#
#     print("WORKING DECORATOR")
#     return simple_wrapper
#
#
# def print_message(name, age=0):
#     print("Hello", name, age)
#
#
# show_message = simple_decorator(print_message)
# show_message("Tom")
#
#
# @simple_decorator
# def print_message(name):
#     print("Hello", name)
#
#
# print_message("Tom")


# def simple_decorator(func):
#     def simple_wrapper(num_1, num_2):
#         print("====================")
#         func(num_1, num_2)
#         print("====================")
#     return simple_wrapper
#
#
# def num_sum(num_1, num_2):
#     print(num_1 + num_2)
#
#
# operation = simple_decorator(num_sum)
# operation(2, 5)
#
#
# @simple_decorator
# def num_sum(num_1, num_2):
#     print(num_1 + num_2)
#
#
# num_sum(2, 5)

# ====================================================================================================
# Задание 23 - реализуйте следующее меню.
#              1. Войти
#              2. Зарегистрироваться
#              3. Завершить программу
#              Данные для входа должны хранится в виде списков. Например:
#              [["admin", "5869"], ["step_guest", "guest8877"], ["zeynalov_f", "1234"]]
#              При выборе пункта 1 программа должна запрашивать логин и пароль. После входа должно
#              показываться меню
#              1. Выйти из аккаунта
#              2. Завершить программу
#              Реализовать это меню. Первый пункт должен перекидывать на меню входа.
#              Реализовать при помощи функций:
#              show_enter_menu() - показывает меню входа, запрашивает ввод, возвращает выбор
#              show_main_menu() - показывает главное меню, запрашивает ввод, возвращает выбор
#              is_account_registered(account_list, login, password) - возвращает True, если
#              аккаунт зарегистрирован, или False в противном случае.
#              registration(account_list, new_login, new_password) - добавляет новый аккаунт,
#              возвращает True, если получилось добавить, и False в противном случае.

# Задание 24 - напишите функцию, которая принимает список, начало, конец и шаг, и возвращает срез
#              списка. Если в функцию передать отрицательный шаг, то должен получится обратный список.
#              Сигнатура функции следующая:
#              make_slice(some_list, start, end, step)
#              Реализовать при помощи циклов.
#              Дополнительно - реализовать эту функцию, как range(end), range(start, end),
#              range(start, end, step), то есть если функция принимает только some_list и end, то
#              start и step выставляются автоматически.

# Задание 25 - напишите функцию, которая принимает список и элемент, который требуется найти. Функция
#              должна вернуть -1, если не нашла этот элемент, или индекс первого вхождения элемента,
#              если он есть в списке. Сигнатура следующая:
#              list_find(some_list, to_find)

# Задание 26 - используя функцию из задания 25, напишите функцию, которая находит все индексы искомого
#              элемента, формирует из них список и возвращает этот список. Сигнатура следующая:
#              list_find_all(some_list, to_find)

# Задание 27 - есть некоторый список имён посетителей и их затрат вида:
#              [["Tom", 150, 200, 237], ["Bob", 1800], ["Tom", 160, 25], ["Tom", 130]]
#              Нужно определить, кто из клиентов
#              часто посещает сервис (3 раза) и часто тратит деньги (5 раз), чтобы в дальнейшем таким
#              клиентам выдавалась скидка.
#              Также вывести итоговые затраты таких клиентов с учётом скидки в 5%.
# ====================================================================================================

# ==============================================LESSON34==============================================
# Лямбда-выражения и анонимные функции
# map, filter, sorted

# def num_prod_two(x):
#     return x * 2
#
#
# nums = [10, 15, 20, 25, 30]
# for i in range(len(nums)):
#     print((lambda x: x * 2)(nums[i]), end=" ")  # Анонимная функция
# print()
# print(nums)


# nums = [10, 15, 20, 25, 30]
# some_lambda = lambda x: x * 2  # НЕ анонимная функция
# for i in range(len(nums)):
#     print(some_lambda(nums[i]), end=" ")
# print()
# print(nums)


# def num_prod_two(x):
#     return x * 2
#
#
# nums = [10, 15, 20, 25, 30]
# nums = list(map(lambda x: x * 2, nums))
# print(nums)


# nums = [10, 15, 20, 25, 30]
# nums = list(filter(lambda x: x % 2 == 0, nums))
# print(nums)

# nums = [20, 15, 10, 30, 25]
# nums = sorted(nums, key=lambda x: x)
# print(nums)

# students = [["Tom", 20], ["Jim", 15], ["Kate", 10], ["Bob", 30], ["Arthur", 25]]
# students = sorted(students, key=lambda x: x[1])
# print(students)


# num_1 = 10
# num_2 = 20
# print((lambda x, y: x * y)(num_1, num_2))

# ====================================================================================================
# ДЗ34
# Реализуйте следующее меню:
# 1. Показать список студентов
# 2. Показать студента по индексу
# 3. Добавить студента в список
# 4. Удалить студента из списка по индексу
# 5. Изменить студента по индексу
#    - 5.1 Изменить фамилию
#    - 5.2 Изменить имя
#    - 5.3 Изменить отчество
#    - 5.4 Добавить оценку студенту по индексу
#    - 5.5 Удалить оценку студенту по индексу
#    - 5.6 Изменить оценку студенту по индексу
# 6. Найти индекс студента по ФИО
# 7. Определить среднюю оценку по индексу студента
# 8. Завершить программу
#
# Студент это список следующего вида: ["Фамилия", "Имя", "Отчество", [оценка, оценка, оценка, ...]].
# По индексам 0, 1, 2 находятся "Фамилия", "Имя", "Отчество".
# По индексу 3 находится список оценок студента.
#
# Список студентов это список следующего вида:
# [["Фамилия", "Имя", "Отчество", [оценка, оценка, оценка, ...]],
#  ["Фамилия", "Имя", "Отчество", [оценка, оценка, оценка, ...]],
#  ["Фамилия", "Имя", "Отчество", [оценка, оценка, оценка, ...]],
#  ...]
#
# При выборе пункта 1 (Показать список студентов) программа должна выводить список студентов в
# следующем формате:
# Фамилия Имя Отчество - оценка оценка оценка ...
# Фамилия Имя Отчество - оценка оценка оценка ...
# Фамилия Имя Отчество - оценка оценка оценка ...
# Реализовать через функцию.
# Сигнатура: show_students(student_list)
# - принимает список студентов
# - внутри себя для каждого студента вызывает print_student_by_index (смотрите ниже)
# - выводит в консоль информацию о студентах
# - ничего не возвращает
#
# При выборе пункта 2 (Показать студента по индексу) программа запрашивает индекс студента из консоли
# и показывает данные студента по указанному индексу. Если же индекс вне границ, то выводит в консоль,
# что неверно введён индекс. Реализовать, используя следующую функцию.
# Сигнатура: print_student_by_index(student_list, student_index)
# - принимает список студентов и индекс студента
# - если индекс вне границы, то возвращает пустую строку
# - если индекс в границах, то возвращает строку с данными студента в формате
#   "Фамилия Имя Отчество - оценка оценка оценка ..."
#
# При выборе пункта 3 (Добавить студента в список) программа запрашивает "Фамилия", "Имя", "Отчество",
# строку оценок через пробел. Строку оценок программа превращает в список чисел при помощи .split(),
# а затем приводит каждый элемент списка к числу. После этого из полученных данных программа
# формирует список ["Фамилия", "Имя", "Отчество", [оценка, оценка, оценка, ...]], добавляет его
# в список студентов и выводит в консоль, что студент успешно добавлен в список.
# Реализовать, используя следующую функцию.
# Сигнатура: add_student(student_list, l_name, f_name, m_name, grade_list)
# - принимает список студентов, фамилию, имя, отчество, список оценок
# - формирует список вида ["Фамилия", "Имя", "Отчество", [оценка, оценка, оценка, ...]]
# - добавляет сформированный список в конец student_list
# - возвращает True
#
# При выборе пункта 4 (Удалить студента из списка по индексу) программа запрашивает индекс студента
# из консоли, удаляет по указанному индексу студента и выводит в консоль, что студент успешно
# удалён из списка. Если же индекс вне границ, то выводит в консоль, что неверно введён индекс.
# Реализовать, используя следующую функцию.
# Сигнатура: remove_student(student_list, student_index)
# - принимает список студентов и индекс
# - если индекс вне границы, то возвращает False
# - если индекс в границах, то удаляет студента по индексу и возвращает True
#
# При выборе пункта 5 (Изменить студента по индексу) программа сперва запрашивает индекс студента
# из консоли. Если индекс вне границ, то программа выводит в консоль, что неверно введён индекс.
# Если индекс в границах, то программа выводит данные студента в консоль в виде:
# Фамилия Имя Отчество - оценка оценка оценка ...
# Затем выводит в консоль меню
# 1. Изменить фамилию
# 2. Изменить имя
# 3. Изменить отчество
# 4. Добавить оценку студенту
# 5. Удалить оценку студенту по индексу
# 6. Изменить оценку студенту по индексу
# 7. Вернуться в главное меню
#
# Меню должно закрываться только в случае выбора 7-го пункта.
# При выборе пунктов 1, 2 или 3 программа запрашивает новые соответствующие данные и устанавливает
# их студенту. Реализовать, используя следующую функцию.
# Сигнатура: change_full_name(student_list, student_index, l_name="", f_name="", m_name="")
# - принимает список студентов, индекс, фамилию, имя и отчество. Последние 3 параметра необязательные
# - меняет у студента данные на те, которые не равны ""
# - возвращает True
#
# При выборе пункта 4 (Добавить оценку студенту) программа запрашивает новую оценку из консоли
# и добавляет её студенту. Реализовать, используя следующую функцию.
# Сигнатура: add_grade(student_list, student_index, new_grade)
# - принимает список студентов, индекс и новую оценку
# - если оценка от 1 до 12 включительно, то добавляет оценку и возвращает True
# - в противном случае возвращает False
#
# При выборе пункта 5 (Удалить оценку студенту по индексу) программа запрашивает индекс оценки
# из консоли и удаляет её. Реализовать, используя следующую функцию.
# Сигнатура: remove_grade(student_list, student_index, grade_index)
# - принимает список студентов, индекс студента и индекс оценки
# - если всё в пределах границ, то удаляет оценку по индексу оценки у студента и возвращает True
# - в противном случае возвращает False
#
# При выборе пункта 6 (Изменить оценку студенту по индексу) программа запрашивает индекс оценки
# и новую оценку из консоли, затем изменяет оценку на новую. Реализовать, используя следующую функцию.
# Сигнатура: change_grade(student_list, student_index, grade_index, new_grade)
# - принимает список студентов, индекс студента, индекс оценки и новую оценку
# - если всё в пределах границ, то меняет у студента оценку на новую оценку и возвращает True
# - в противном случае возвращает False.
#
# В главном меню при выборе пункта 6 (Найти индекс студента по ФИО) программа запрашивает отдельно
# на каждой строке "Фамилия", "Имя", "Отчество" из консоли. Далее, если программа находит
# по этим данным студента, то выводит индекс этого студента. В противном случае программа сообщает
# в консоли, что такого студента нет. Реализовать, используя следующую функцию.
# Сигнатура: find_by_full_name(student_list, l_name, f_name, m_name)
# - принимает список студентов, фамилию, имя и отчество
# - находит индекс первого найденного студента по данным
# - если не находит, то индекс равен -1
# - возвращает индекс
#
# В главном меню при выборе пункта 7 (Определить среднюю оценку по индексу студента) программа
# запрашивает индекс студента из консоли. Если индекс вне границ, то программа выводит в консоль,
# что неверно введён индекс. Если же индекс в границах, то программа вычисляет среднюю оценку
# студента и выводит в консоль. Реализовать, используя следующую функцию.
# Сигнатура: calculate_avg(student_list, student_index)
# - принимает список студентов и индекс
# - если список оценок не пустой, то вычисляет среднюю оценку студента
# - в противном случае результат равен нулю
# - возвращает полученный результат
# ====================================================================================================
