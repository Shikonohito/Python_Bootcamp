Примечание:
Используйте только то, что было пройденно до этого урока включительно. Не используйте в условии оператор in. Не используйте готовые методы, только если в заданиях не говорится об использовании тех или иных методов. Можно использовать append(), split(), len(). Не используйте срезы.


Реализуйте следующее меню:
1. Показать список студентов
2. Показать студента по идентификатору
3. Добавить студента в список
4. Удалить студента из списка по идентификатору
5. Изменить студента по идентификатору
6. Найти студентов по Фамилии и Имени
7. Определить среднюю оценку по идентификатору студента
8. Завершить программу

Студент это список следующего вида: ["Идентификатор", "Фамилия", "Имя", [<оценка>, <оценка>, <оценка>, ...]].
По индексам 0, 1, 2 находятся "Идентификатор", "Фамилия", "Имя". По индексу 3 находится список оценок студента.

Список студентов это список следующего вида:
[["Идентификатор", "Фамилия", "Имя", [<оценка>, <оценка>, <оценка>, ...]],
 ["Идентификатор", "Фамилия", "Имя", [<оценка>, <оценка>, <оценка>, ...]],
 ["Идентификатор", "Фамилия", "Имя", [<оценка>, <оценка>, <оценка>, ...]],
 ...]

При выборе пункта 1 (Показать список студентов) программа должна выводить список студентов в следующем формате:
Идентификатор Фамилия Имя - <оценка> <оценка> <оценка> ...
Идентификатор Фамилия Имя - <оценка> <оценка> <оценка> ...
...

Реализовать через следующие функции:
1. show_students(student_list)
— принимает список студентов
— использует student_to_str(student) для получение строки (смотрите ниже)
— выводит в консоль информацию о студентах
— ничего не возвращает

2. student_to_str(student)
— принимает студента
— возвращает строку в виде "Идентификатор Фамилия Имя - оценка оценка оценка ..."


При выборе пункта 2 (Показать студента по идентификатору) программа запрашивает идентификатор студента из консоли и показывает данные студента по указанному идентификатору. Если же идентификатор не найден, то выводит в консоль, что студент не найден. 

Реализовать, используя следующие функции:
1. get_student(student_list, student_id)
— принимает список студентов и идентификатор студента
— внутри себя вызывает функцию get_student_index (смотрите ниже)
— если студент не найден, то возвращает None
— если студент найден, то возвращает студента как список

2. get_student_index(student_list, student_id)
— принимает список студентов и идентификатор студента
— если студент найден, возвращает его индекс из списка
— если студент не найден, то возвращает -1


При выборе пункта 3 (Добавить студента в список) программа запрашивает Идентификатор, Фамилию, Отчество, строку оценок через пробел. Строку оценок программа превращает в список чисел при помощи split(), а затем приводит каждый элемент списка к числу. После этого из полученных данных программа формирует список ["Идентификатор", "Фамилия", "Имя", [<оценка>, <оценка>, <оценка>, ...]], добавляет его в список студентов и выводит в консоль, что студент успешно добавлен в список.

Реализовать, используя следующую функцию:
add_student(student_list, new_student)
— принимает список студентов и студента
— проверяет на идентификатор с помощью get_student_index
—— если идентификатор нового студента уже есть среди других студентов, то возвращает False
—— если идентификатор нового студента не найден среди других студентов, то добавляет студента в конец списка, возвращает True


При выборе пункта 4 (Удалить студента из списка по идентификатору) программа запрашивает идентификатор студента из консоли, удаляет студента с указанным идентификатором и выводит в консоль, что студент успешно удалён из списка. Если же идентификатор не найден, то выводит в консоль, что студент не найден.

Реализовать, используя следующую функцию:
remove_student(student_list, student_id)
— принимает список студентов и идентификатор
— проверяет на идентификатор с помощью get_student_index
—— если поиск идентификатора вернул индекс, то удаляет по индексу и возвращает True
—— если поиск идентификатора вернул -1, то возвращает False


При выборе пункта 5 (Изменить студента по идентификатору) программа сперва запрашивает идентификатор студента из консоли. Если студент по указанному идентификатору не найден, то программа выводит в консоль, что студента с таким идентификатором отсутствует. В противном случае программа делает копию студента (смотрите ниже get_copy) и выводит исходные данные студента и изменённые данные в консоль в виде:
Исходные данные: Идентификатор Фамилия Имя - <оценка> <оценка> <оценка> ...
Изменённые данные: Идентификатор Фамилия Имя - <оценка> <оценка> <оценка> ...

get_copy(student)
— принимает студента
— делает копию студента
— возвращает копию студента


Затем в консоль выводится следующее меню:
1. Изменить идентификатор
2. Изменить фамилию
3. Изменить имя
4. Добавить оценку студенту
5. Удалить оценку студенту по порядковому номеру
6. Изменить оценку студенту по порядковому номеру
7. Подтвердить изменения и вернуться в главное меню
8. Отменить изменения и вернуться в главное меню

При выборе пунктов 1, 2 или 3 программа запрашивает новые соответствующие данные и устанавливает их копии студента.

При выборе пункта 4 (Добавить оценку студенту) программа запрашивает новую оценку из консоли и добавляет её студенту. Если оценка не от 1 до 12 включительно, то выводится сообщение о неверной оценке.

Реализовать, используя следующую функцию:
add_grade(student, new_grade)
— принимает студента и новую оценку
— если оценка от 1 до 12 включительно, то добавляет оценку и возвращает True
— в противном случае возвращает False


При выборе пункта 5 (Удалить оценку студенту по порядковому номеру) программа запрашивает порядковый номер оценки (не индекс) из консоли. Если номер в границах списка оценки, то удаляет её. В противном случае выводится сообщение о неверном номере.

Реализовать, используя следующую функцию:
remove_grade(student, grade_index)
— принимает студента и индекс оценки
— если всё в пределах границ, то удаляет оценку у студента и возвращает True
— в противном случае возвращает False


При выборе пункта 6 (Изменить оценку студенту по порядковому номеру) программа запрашивает порядковый номер оценки (не индекс) и новую оценку из консоли. Если номер номер в границах списка оценки и новая оценка в границах от 1 до 12 включительно, то изменяет её. В противном случае выводится сообщение о неверном номере или неверной оценке.

Реализовать, используя следующую функцию:
change_grade(student, grade_index, new_grade)
— принимает студента, индекс оценки и новую оценку
— если всё в пределах границ, то меняет у студента оценку на новую оценку и возвращает True
— в противном случае возвращает False.


При выборе пункта 7 (Подтвердить изменения и вернуться в главное меню) программа пытается внести изменения для студента. Если идентификатор изменённого студента не найден среди идентификаторов других студентов или же он совпадает с идентификатором исходного студента, то вносятся изменения. В противном случае сообщается, что идентификатор совпадает с одним из идентификаторов других студентов.

Реализовать, используя следующую функцию:
change_student(student_list, student_id, new_student)
— принимает список студентов, идентификатор изменяемого студента, нового студента
— если идентификатор нового студента не совпадает ни с одним из идентификаторов других студентов или же он совпадает с идентификатором исходного студента, то вносит изменения и возвращает True
— в противном случае возвращает False


При выборе пункта 8 (Отменить изменения и вернуться в главное меню) программа просто возвращается в предыдущее меню.

В главном меню при выборе пункта 6 (Найти студентов по Фамилии и Имени) программа запрашивает отдельно на каждой строке Фамилию и Имя из консоли. Затем программа выводит в консоль всех найденных студентов в виде:
Идентификатор Фамилия Имя - <оценка> <оценка> <оценка> ...
Идентификатор Фамилия Имя - <оценка> <оценка> <оценка> ...
...

Если программа никого не нашла, то она сообщает об этом в консоли.

Реализовать, используя для вывода show_students и для фильтра следующую функцию:
filter_students(student_list, l_name, f_name)
— принимает список студентов, фамилию и имя
— проходится по списку студентов и ищет совпадения имени и фамилии
— если совпадение есть, то добавляет студента в отфильтрованный список
— возвращает отфильтрованный список


В главном меню при выборе пункта 7 (Определить среднюю оценку по идентификатору студента) программа запрашивает идентификатор студента из консоли. Если индекс вне границ, то программа выводит в консоль, что неверно введён индекс. Если же индекс в границах, то программа вычисляет среднюю оценку студента и выводит в консоль.

Реализовать, используя следующую функцию:
calculate_avg(student_list, student_id)
— принимает список студентов и идентификатор
— если список оценок не пустой, то вычисляет среднюю оценку студента
— в противном случае результат равен нулю
— возвращает полученный результат