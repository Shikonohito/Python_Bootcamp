Задание 1.
Создайте класс "Банковская карта". Укажите в ней поля "Идентификатор", "Имя", "Фамилия", "Месяц", "Год", "Баланс".
Определите для класса строковое представление. Оно должно возвращать строку формата "Идентификатор Имя Баланс".
Определите для класса конструктор. Он должен принимать каждое поле.
Определите для класса свойства.
В конструкторе и свойстве для "Баланс" сделать так, что если для баланса выставляется число меньше нуля, то программа выставляет 0.

Определите для класса метод пополнения баланса.
Метод принимает целое число. Если число отрицательное, то метод возвращает False.
В противном случае метод добавляет к балансу число и возвращает True.

Определите для класса метод снятия с баланса.
Метод принимает целое число. Если число отрицательное или число больше баланса, то метод возвращает False.
В противном случае метод снимает с баланса число и возвращает True.


Задание 2. (на основе задания 1)
Создайте класс "Клиент". Укажите в нём поля "Идентификатор", "Имя", "Фамилия", "Список банковских карт".
Определите для класса строковое представление. Оно должно возвращать строку формата "Идентификатор Имя Фамилия"
Определите для класса конструктор. Он должен принимать все поля.
Определите для класса свойства.

Определите для класса поиск банковской карты.
Метод принимает идентификатор банковской карты, возвращает индекс списка, если идентификатор найден в списке, и -1, если не найден.

Определите для класса получение банковской карты по идентификатору.
Метод принимает идентификатор банковской карты. Метод вызывает поиск идентификатора. Если идентификатор есть в списке, то возвращает объект по найденному индексу.
В противном случае возвращает None.

Определите для класса добавление банковской карты.
Метод принимает объект класса "Банковская карта". Метод вызывает метод поиска банковской карты.
Если идентификатор этой банковской карты уже есть в списке, то возвращается False.
В противном случае банковская карта добавляется в список банковских карт и возвращается True.

Определите для класса изменение банковской карты.
Метод принимает идентификатор банковской карты для поиска и объект класса "Банковская карта". Метод вызывает метод поиска банковской карты.
Если идентификатор для поиска есть в списке и идентификатор для поиска совпадает с идентификатором из принятого объекта или
идентификатор для поиска есть в списке, но идентификатора из принятого объекта нет в списке, то происходит замена.
Объект по идентификатору для поиска заменяется на принятый объект и возвращается True.

Определите для класса удаление банковской карты.
Метод принимает идентификатор банковской карты. Метод вызывает метод поиска банковской карты.
Если идентификатор этой банковской карты есть в списке, то банковская карта удаляется из списка и возвращается True.
В противном случае возвращается False.

Определите для класса метод пополнения баланса банковской карты.
Метод принимает идентификатор банковской карты и число. Метод вызывает поиск по идентификатору.
Если идентификатор этой банковской карты есть в списке, то у этой банковской карты вызывается метод пополнения и перехватывается то, что этот метод вернёт (True или False). Далее оно возвращается.
В противном случае возвращается False.

Определите для класса метод снятия баланса банковской карты.
Метод принимает идентификатор банковской карты и число. Метод вызывает поиск по идентификатору.
Если идентификатор этой банковской карты есть в списке, то у этой банковской карты вызывается метод снятия и перехватывается то, что этот метод вернёт (True или False). Далее оно возвращается.
В противном случае возвращается False.


Задание 3. (на основе заданий 1 и 2)
Создайте класс "База данных". Укажите в нём поле "Список клиентов".
Определите для класса конструктор. Он должен принимать список клиентов.
Определите для класса свойства.

Определите для класса поиск клиента.
Метод принимает идентификатор клиента, возвращает индекс списка, если идентификатор найден в списке, и -1, если не найден.

Определите для класса получение клиента по идентификатору.
Метод принимает идентификатор клиента. Метод вызывает поиск клиента. Если идентификатор есть в списке, то возвращает объект по найденному индексу.
В противном случае возвращает None.

Определите для класса добавление клиента.
Метод принимает объект класса "Клиент". Метод вызывает метод поиска клиента.
Если идентификатор этого клиента уже есть в списке, то возвращается False.
В противном случае клиент добавляется в список клиентов и возвращается True.

Определите для класса изменение клиента.
Метод принимает идентификатор клиента для поиска и объект класса "Клиент". Метод вызывает метод поиска клиента.
Если идентификатор для поиска есть в списке и идентификатор для поиска совпадает с идентификатором из принятого объекта или
идентификатор для поиска есть в списке, но идентификатора из принятого объекта нет в списке, то происходит замена.
Объект по идентификатору для поиска заменяется на принятый объект и возвращается True.

Определите для класса удаление клиента.
Метод принимает идентификатор клиента. Метод вызывает метод поиска клиента.
Если идентификатор этого клиента есть в списке, то клиент удаляется из списка и возвращается True.
В противном случае возвращается False.


Задание 4. (на основе заданий 1, 2 и 3)
Реализовать следующее меню:
1. Показать всех клиентов
2. Добавить нового клиента
3. Показать клиента по его идентификатору
4. Изменить данные клиента по его идентификатору
5. Удалить клиента по его идентификатору
6. Завершить программу

При выборе пункта 1 программа вызывает свойство списка из объекта класса "База данных", проходится по каждому клиенту и выводит их в консоль.

При выборе пункта 2 должны запрашиваться данные из консоли, формироваться объект класса "Клиент" и вызываться метод добавления клиента у объекта класса "База данных".
В зависимости от результата работы этого метода, в консоли выводится оповещение.

При выборе пункта 3 должен запрашиваться идентификатор из консоли, вызываться метод получения строкового представления по идентификатору у объекта класса "База данных" и выводиться результат работы метода.

При выборе пункта 4 должен запрашиваться идентификатор клиента из консоли для поиска и вызываться метод получения клиента по идентификатору у объекта класса "База данных".
Если результат работы не None, то программа выводит строковое представление найденного клиента. Потом выводится следующее меню:
1. Изменить идентификатор, имя и фамилию клиента по его идентификатору
2. Добавить новую банковскую карточку клиенту
3. Изменить данные банковской карточки у клиента
4. Удалить банковскую карточку у клиента
5. Пополнить баланс банковской карты
6. Снять с баланса банковской карты
7. Вернуться в главное меню

При выборе пункта 1 должны запрашиваться из консоли новый идентификатор клиента, имя и фамилия. Список карт забирается у найденного клиента.
Далее формируется новый объект класса "Клиент" из этих данных и вызывается метод изменения клиента у объекта класса "Базы данных".
В зависимости от результата работы этого метода, в консоли выводится оповещение.

При выборе пункта 2 должны запрашиваться данные из консоли, формироваться объект класса "Банковская карта" и вызываться метод добавления карты у клиента.
В зависимости от результата работы этого метода, в консоли выводится оповещение.

При выборе пункта 3 должен запрашиваться идентификатор банковской карты из консоли и вызываться метод получения банковской карты по идентификатору у клиента.
Если результат работы не None, то программа выводит строковое представление найденной банковской карты.
Потом программа запрашивает из консоли новый идентификатор, имя, фамилия, месяц, год, баланс, формирует из этих данных новый объект класса "Банковская карта"
и вызывает метод изменения банковской карты у клиента.
В зависимости от результата работы этого метода, в консоли выводится оповещение.

При выборе пункта 4 должен запрашиваться идентификатор банковской карты из консоли и вызываться метод удаления банковской карты у клиента.
В зависимости от результата работы этого метода, в консоли выводится оповещение.

При выборе пункта 5 должен запрашиваться идентификатор банковской карты и число из консоли, после этого вызываться метод пополнения баланса банковской карты у клиента.
В зависимости от результата работы этого метода, в консоли выводится оповещение.

При выборе пункта 6 должен запрашиваться идентификатор банковской карты и число из консоли, после этого вызываться метод снятия с баланса банковской карты у клиента.
В зависимости от результата работы этого метода, в консоли выводится оповещение.

При выборе пункта 7 программа возвращается в главное меню.

В главном меню при выборе пункта 5 должен запрашиваться идентификатор клиента из консоли и вызываться метод удаления клиента у объекта класса "База данных".
В зависимости от результата работы этого метода, в консоли выводится оповещение.

В главном меню при выборе пункта 6 программа завершается.


Задание 5 (Необязательное) ***.
Для выполнения этого задания в самом верху вашего кода пропишите import datetime.
На основе выполненных выше заданий реализуйте в главном меню "Оформить подписку клиенту".
Перед реализации этой функции нужно условиться, что в класс "Клиент" добавляется поле "Подписка".
В конструкторе этого класса нужно указать для этого поля значение datetime.datetime.now(), а также указать для поля свойства.
Определить для этого класса метод "Оформить подписку". Метод принимает идентификатор банковской карты, количество дней и число.
Метод вызывает поиск банковской карты. Если идентификатор есть, то у банковской карты вызывается метод на снятие баланса. Если эта операция успешна,
то в поле "Подписка" записывается следующее: datetime.datetime.now() + datetime.timedelta(days=число). Число ставится из принимающего параметра.
Если метод отработал успешно, то программа возвращает True. В противном случае False.

В классе "База данных" нужно определить поле "Подписки" в виде словаря. Внутри него указать {30: 5, 90: 13, 365: 49}. Конструктор не меняем.
Также определить в этом классе метод "Оформить подписку клиенту", который принимает идентификатор клиента, идентификатор карточки клиента и ключ подписки.
Этот метод вызывает поиск клиента. Если клиент найден, то проверяется datetime.datetime.now() > "Подписка" у клиента.
Если это условие верно, значит у пользователя нет подписки (текущая дата больше, чем прошлая дата), и вызывается у клиента метод "Оформить подписку".
Если метод отработал успешно, то возвращается True. В противном случае False.

Также нужно изменить в главном меню добавление нового клиента. Сделать так, чтобы новым пользователям в "subscription" выставлялось datetime.datetime.now().
Пункт "Оформить подписку клиенту" должна запрашивать идентификатор клиента из консоли и вызывать метод поиска клиента у объекта класса "База данных".
Если идентификатор есть в базе данных, то сперва показываются данные клиента, затем предлагается следующее меню:
1. Оформить подписку на 1 месяц (5 денег)
2. Оформить подписку на 3 месяца (13 денег)
3. Оформить подписку на 1 год (49 денег)
4. Вернуться в главное меню

При выборе пунктов 1-3 из консоли запрашивается идентификатор банковской карты, затем вызывается метод "Оформить подписку клиенту" у объекта "Базы данных" с передачей ей соответсвующий данных.
В зависимости от результата работы этого метода, в консоли выводится оповещение.