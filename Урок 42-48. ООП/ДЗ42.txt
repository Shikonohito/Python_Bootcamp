Задание 42.1
Создайте класс "Игрок". Этот класс должен хранить поля для никнейма, рейтинга, количества побед, количества поражений.
Для класса определите строковое представление (__str__) и конструктор (__init__).
Для класса определите метод засчитывания победы. Метод должен увеличивать рейтинг на 3 единицы и увеличивать счётчик побед на 1.
Для класса определите метод засчитывания поражения. Метод должен уменьшать рейтинг на 10 единиц и увеличивать счётчик поражений на 1.
Для класса определите метод, который возвращает победы делённые на поражения.


Задание 42.2
Используя созданный класс в задании 42.1, реализуйте следующее меню:
1. Показать всех игроков
2. Показать данные одного игрока
3. Добавить игрока
4. Удалить игрока
5. Засчитать победу игроку
6. Засчитать поражение игроку
7. Завершить программу

При выборе пункта 1 программа показывает в консоли данные всех игроков в виде:
"Никнейм" - <рейтинг>, <количество_побед>/<количество_поражений>
"Никнейм" - <рейтинг>, <количество_побед>/<количество_поражений>
...

При выборе пункта 2 программа запрашивает с консоли никнейм игрока и показывает в консоли данные введённого игрока в виде:
"Никнейм" - <рейтинг>, <количество_побед>/<количество_поражений>, <cоотношение_побед/поражений>

При выборе пункта 3 программа запрашивает с консоли никнейм. Если никнейм не занят, то программа формирует объект "Игрок", у которого рейтинг, количество побед и поражений равны 0, и помещает в список игроков.
При выборе пункта 4 программа запрашивает с консоли никнейм. Если никнейм найден, то программа удаляет игрока из списка.
При выборе пунктов 5-6 программа запрашивает с консоли никнейм. Если никнейм найден, то программа засчитывает победу в случае пункта 5 и поражение в случае пункта 6.


Задание 42.3
Создайте класс "Аккаунт". Этот класс должен хранить поля для логина, пароля, имени, фамилии и баланса.
Для класса определите строковое представление (__str__) и конструктор (__init__).
Для класса определите метод пополнения баланса и метод снятия с баланса. Методы принимают положительные целые числа.


Задание 42.4
Используя созданный класс в задании 42.3, реализуйте следующее меню:
1. Зарегистрироваться
2. Войти
3. Завершить программу

Все аккаунты хранятся в списке. Аккаунт - это объект класса "Аккаунт".
При выборе пункта 1 программа запрашивает с консоли логин и пароль. Если введённого логина среди других аккаунтов списка нет, то программа создаёт объект "Аккаунт" и добавляет в список. В противном случае программа должна сообщить о проблеме. Затем возвращается в меню входа.

При выборе пункта 2 программа запрашивает с консоли логин и пароль. Если логин и пароль совпадают с одним из аккаунтов, то программа показывает следующее меню:
1. Показать данные аккаунта
2. Изменить фамилию
3. Изменить имя
4. Пополнить баланс
5. Перевести деньги на другой аккаунт
6. Выйти из аккаунта
7. Завершить программу

При выборе пункта 1 программа вызывает строковое представление у объекта и выводит в консоль следующее:
"Имя" "Фамилия"
Баланс: <баланс>

При выборе пунктов 2-3 программа запрашивает соответствующие данные и сразу же меняет данные у аккаунта.
При выборе пункта 4 программа запрашивает число, затем вызывает у объекта метод пополнения. Программа должна сообщить об успехе или проблеме.
При выборе пункта 5 программа запрашивает логин другого пользователя. Если он найден, то программа запрашивает с консоли сумму перевода. Затем программа вызывает у текущего аккаунта метод снятия баланса. Если он проходит успешно, то у найденного аккаунта вызывается метод пополнения на указанную сумму.


Задание 42.5
Создайте класс "Автомобиль". Этот класс должен хранить поля для идентификатора, марки, модели, цены.
Для класса определите строковое представление (__str__) и конструктор (__init__).
Для класса определите метод копии. Метод должен вернуть объект "Автомобиль" с теми же данными. что и у себя.


Задание 42.6
Используя созданный класс в задании 42.5, реализуйте следующее меню:
1. Показать данные автомобиля по идентификатору
2. Показать данные всех автомобилей из списка
3. Показать общую стоимость автомобилей
4. Добавить новый автомобиль в список
5. Удалить автомобиль из списка по идентификатору
6. Изменить автомобиль по идентификатору

При выборе пункта 1 программа запрашивает с консоли идентификатор. Если она находит автомобиль с этим идентификатором, то выводит его строковое представление в виде:
"Идентификатор" "Марка" "Модель" <цена>

При выборе пункта 2 программа проходится по списку автомобилей и вызывает у них строковое представление.
При выборе пункта 3 программа проходится по списку автомобилей, забирает у них цену и высчитывает общую стоимость, затем выводит её в консоль.
При выборе пункта 4 программа запрашивает с консоли идентификатор, марку, модель и цену. Затем формирует из него объект "Автомобиль". После этого программа проходится по каждому автомобилю из списка и сверяет идентификаторы. Если совпадений нет, то добавляет созданный объект в список.
При выборе пункта 5 программа запрашивает с консоли идентификатор. Если идентификатор найден среди автомобилей в списке, то программа удаляет найденный объект.
При выборе пункта 6 программа запрашивает с консоли идентификатор. Если идентификатор найден, то программа выводит следующее:
Старые данные: "Идентификатор" "Марка" "Модель" <цена>
Новые данные: "Идентификатор" "Марка" "Модель" <цена>
=========================================================
1. Изменить идентификатор
2. Изменить марку
3. Изменить модель
4. Изменить цену
5. Подтвердить изменения и вернуться
6. Отменить изменения и вернуться

При выборе пунктов 1-4 программа запрашивает с консоли соответствующие данные. Изменения должны вносится только в том случае, если был выбран пункт 5. Поэтому пункты 1-4 должны изменять копию данных, а при выборе пункта 5 заменять оригинал.
При выборе пункта 5 программа должна проверить идентификатор изменённых данных. Если идентификатор не изменился или же совпадений с идентификаторами других пользователей нет, то проверка пройдена успешно. Если цена положительна, то проверка пройдена. Если все проверки пройдены, то старые данные заменяются на новые. В противном случае программа должна сообщить о проблеме.