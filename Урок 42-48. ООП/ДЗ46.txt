Домашнее Задание 46.1
Создайте класс "Payment". Этот класс должен хранить поля для названия сервиса и процента комиссии.
Для класса определите строковое представление, конструктор и свойства.
Для класса определите метод "Сделать оплату", который принимает сумму и возвращает сумму с процентом.

Создайте ещё 3 класса, которые наследуются от класса "Payment" - "PaypalPayment", "CreditCardPayment" и "BonusCardPayment".
Переопределите для них конструктор и строковое представление. Для "PaypalPayment" выставите комиссию 5%, для "CreditCardPayment" - 1.5% и создайте поле "Баланс", для "BonusCardPayment" - 0% и тоже создайте поле "Баланс".
Переопределите для них метод "Сделать оплату". Для "PaypalPayment" проверяется максимальная сумма оплаты. Если она не превышает 5000, то производится оплата от родителя. В противном случае возвращается 0. Для "CreditCard" проверяется баланс. Если баланс больше, чем сумма оплаты, то снимается сумма с баланса и производится оплата от родителя. В противном случае возвращается 0. Для "BonusCardPayment" проверяется баланс. Если баланс не отрицательный, то снимается сумма с баланса и производится оплата от родителя.

Затем напишите программу, которая запрашивает с консоли сумму оплаты, затем запрашивает способ оплаты - Paypal, кредитная карта или бонусная карта. После успешной оплаты программа выводит в консоль  На кредитной и бонусной картах по умолчанию выставите баланс 500.


Домашнее Задание 46.2
Переделайте класс StudentDB так, чтобы программа заработала.
КОД:
class Student:
    __username = ""
    __f_name = ""
    __l_name = ""

    def __init__(self, username: str, f_name: str, l_name: str):
        self.__username = username
        self.__f_name = f_name.title()
        self.__l_name = l_name.title()

    def __str__(self):
        return f"{self.__username} {self.__f_name} {self.__l_name}"

    def get_username(self):
        return self.__username


class StudentDB:
    __student_list = list()

    def __init__(self, students: list[Student] = list):
        self.__student_list = students

    def get_students(self):
        return tuple(self.__student_list)


student_1 = Student("Teston_xyz", "Teston", "Lebra")
student_2 = Student("Tom_267", "Tom", "Jackson")
db = StudentDB([student_1, student_2])
for student in db.get_students():
    print(student)

student_3 = Student("AT_red", "Astrid", "Hofferson")
if student_3 in db:  # False
    print("Found")
else:
    print("Not found")
print()

db + student_3  # Добавляется новый студент
for student in db.get_students():
    print(student)

if student_3 in db:  # True
    print("Found")
else:
    print("Not found")
print()

student_4 = Student("AT_red", "NOT", "ADDED")
db + student_4  # Ничего не происходит, так как идентификатор уже присутствует
for student in db.get_students():
    print(student)
