Задание 44.1
Создайте класс "Продукт". Этот класс должен хранить поля для идентификатора, названия, цены и количества.
Для класса определите строковое представление, конструктор и свойства.
Для класса определите метод пополнения и понижения количества. Метод должен принимать положительное целое число, затем увеличивать и уменьшать количество соответственно.
Для класса определите метод продажи. Метод должен принимать положительное целое число, отнимать из количества и возвращать итоговую сумму продажи. Если указанное количество больше количества продукта, то возвращает -1.
Для класса определите метод копии. Метод должен возвращать объект класса "Продукт" с теми же данными, что и оригинал.


Задание 44.2
Используя класс из задания 44.1, реализуйте следующее меню:
Магазин: 0
1. Показать все продукты
2. Добавить продукт
3. Изменить продукт
4. Удалить продукт
5. Продать продукт
6. Завершить программу

При выборе пункта 1 программа выводит в консоль продукты в следующем виде:
"Идентификатор" "Название" <цена> <количество>
"Идентификатор" "Название" <цена> <количество>
...

При выборе пункта 2 программа запрашивает с консоли идентификатор, название, цену и количество. Если идентификатор не присутствует среди продуктов, то программа создаёт объект "Продукт" и добавляет его в список. ДОПОЛНИТЕЛЬНО - сделайте так, чтобы при добавлении продукта с тем же идентификатором, что у продукта из списка, просто увеличивалось количество.

При выборе пункта 4 программа запрашивает с консоли идентификатор и количество. Если идентификатор найден, то программа понижает количество у найденного продукта. ДОПОЛНИТЕЛЬНО - сделайте так, чтобы при опускании количества продукта до 0, он удалялся из списка.

При выборе пункта 5 программа запрашивает с консоли идентификатор и количество. Если идентификатор найден, то программа продаёт указанное количество продукта и увеличивает счётчик магазина на проданную сумму денег.

При выборе пункта 3 программа запрашивает с консоли идентификатор. Если идентификатор найден, то программа выводит в консоль следующее:
СТАРЫЕ ДАННЫЕ: "Идентификатор" "Название" <цена> <количество>
НОВЫЕ ДАННЫЕ: "Идентификатор" "Название" <цена> <количество>
1. Изменить идентификатор
2. Изменить название
3. Изменить цену
4. Изменить количество
5. Подтвердить изменения и вернуться
6. Отменить изменения и вернуться

При выборе пунктов 1-4 программа запрашивает с консоли соответствующие данные. Изменения должны вносится только в том случае, если был выбран пункт 5. Поэтому пункты 1-4 должны изменять копию данных, а при выборе пункта 5 заменять оригинал.
При выборе пункта 5 программа должна проверить идентификатор изменённых данных. Если идентификатор не изменился или же совпадений с идентификаторами других продуктов нет, то проверка пройдена успешно. Если цена и количество положительны, то проверки пройдены. Если все проверки пройдены, то старые данные заменяются на новые. В противном случае программа должна сообщить о проблеме.


Задание 44.3
Создайте класс "Сотрудник". Этот класс должен хранить поля для идентификатора сотрудника, должности, имени, возраста и зарплаты.
Для класса определите строковое представление, конструктор и свойства.

Создайте класс "Руководитель". Этот класс должен наследоваться от класса "Сотрудник" и хранить поля для количества подчинённых и список подчинённых.
Для класса определите строковое представление, конструктор и свойства.
Для класса определите методы поиска, добавления и удаления подчинённых.

Создайте класс "Тестер". Этот класс должен наследоваться от класса "Сотрудник" и хранить поля для идентификатора руководителя, словаря не выполненных заявок вида {"идентификатор_заявки": "Описание"} и словаря выполненных заявок вида {"идентификатор_заявки": "Описание"}.
Для класса определите строковое представление, конструктор и свойства.
Для класса определите методы поиска, добавления, изменения и удаления не выполненных и выполненных заявок. При добавлении заявки проверка на дубликаты должна происходить как среди не выполненных, так и среди выполненных заявок, независимо от типа добавления заявки.
Для класса определите метод выполнения заявки. Метод должен принимать идентификатор заявки, добавлять её в выполненные заявки и удалять из не выполненных заявок.
Для класса определите метод отмены выполнения заявки. Метод должен принимать идентификатор заявки, добавлять её в не выполненные заявки и удалять из выполненных заявок.


Задание 44.4
Используя классы из задания 44.3, реализуйте следующее меню:
1. Показать всех сотрудников
2. Добавить сотрудника
3. Удалить сотрудника
4. Показать подчинённых
5. Операции для тестера
6. Завершить программу

При выборе пункта 1 программа выводит в консоль данные в следующем виде:
"Идентификатор" - "Имя", <возраст>, "Должность", <зарплата>
"Идентификатор" - "Имя", <возраст>, "Должность", <зарплата>
...

При выборе пункта 2 программа запрашивает с консоли должность, а затем идентификатор, имя, возраст, зарплату, затем формирует из него объект "Руководитель" или "Тестер" в зависимости от должности и добавляет в список. Также отдельно для тестера запрашивает идентификатор руководителя. Если созданный сотрудник это тестер, то руководителю в список добавляется созданный тестер.
При выборе пункта 3 программа запрашивает с консоли идентификатор. Если идентификатор найден и должность руководитель, то просто удаляет сотрудника из списка. Если должность тестер, то сперва удаляет сотрудника у руководителя, а затем из общего списка.
При выборе пункта 4 программа запрашивает идентификатор руководителя. Если идентификатор найден, то программа выводит в консоль данные в следующем виде:
"Идентификатор" - "Имя", <возраст>, "Должность", <зарплата>
"Идентификатор" - "Имя", <возраст>, "Должность", <зарплата>
...

При выборе пункта 5 программа запрашивает идентификатор тестера. Если идентификатор найден, то программа выводит следующее меню:
1. Показать выполненные заявки
2. Показать не выполненные заявки
3. Добавить заявку
4. Изменить описание заявки
5. Удалить заявку
6. Засчитать заявку как выполненную
7. Отменить выполненную заявку
8. Вернуться

При выборе пунктов 1-2 программа выводит в консоль заявки в следующем виде:
"идентификатор_заявки"
"Описание"
========================================================================
"идентификатор_заявки"
"Описание"
========================================================================
...

При выборе пункта 3 программа запрашивает с консоли новый идентификатор и описание, затем добавляет тестеру заявку как не выполненную.
При выборе пункта 4 программа запрашивает с консоли идентификатор не выполненной заявки и новое описание, затем меняет описание найденной заявки.
При выборе пункта 5 пррограмма запрашивает с консоли идентификатор не выполненной заявки и удаляет её из не выполненных.
При выборе пункта 6 программа запрашивает с консоли идентификатор не выполненной заявки и переносит её из не выполненных в выполненные заявки.
При выборе пункта 7 программа запрашивает с консоли идентификатор выполненной заявки и переносит её из выполненных в не выполненные заявки.


Задание 44.5
Создайте класс и определите в нём поля и методы, чтобы работал следующий код:
car_1 = Car("Bugatti", "Divo", 380)
print(car_1)  # Bugatti Divo

print(car_1.get_brand())  # Bugatti
print(car_1.get_model())  # Divo
print(car_1.get_speed())  # 0
print(car_1.get_max_speed())  # 380

car_1.accelerate(100)
print(car_1.get_speed())  # 0

car_1.decelerate(25)
print(car_1.get_speed())  # 0


if not car_1.is_engine_started():
    car_1.engine_start()

car_1.accelerate(100)
print(car_1.get_speed())  # 100

car_1.accelerate(-100)
print(car_1.get_speed())  # 100

car_1.decelerate(25)
print(car_1.get_speed())  # 75

car_1.decelerate(-25)
print(car_1.get_speed())  # 75

print(car_1.is_engine_started())  # True
car_1.engine_stop()
print(car_1.is_engine_started())  # True
print(car_1.get_speed())  # 75

print(f"Braking distance {car_1.brake()} meters")  # 29.525699168556304
print(car_1.get_speed())  # 0
car_1.engine_stop()
print(car_1.is_engine_started())  # False

ПОДСКАЗКИ
1. Машина должна хранить скорость в км/ч.
2. Для brake создайте следующий метод: brake(self, mu=0.75, g=9.8).
3. Тормозной путь вычисляйте по формуле braking_distance = speed_ms * speed_ms / (2 * mu * g), где speed_ms - скорость в м/с, mu - коэффициент силы трения, g - ускорение свободного падения.


Задание 44.6
Teston Lebra описал класс и его использование, но нарушил инкапсуляцию как с классом, так и с некоторыми функциями. Переделайте весь его код так, чтобы инкапсуляция не нарушалась. Оставьте комментарии там, где Вы изменили код.
КОД:
class ITStepStudent:
    login = ""
    f_name = ""
    l_name = ""
    coins = 0
    crystals = 0
    rating = 0
    grades = list()

    def __init__(self, login: str, f_name: str, l_name: str, coins=0, crystals=0, grades=None):
        self.login = login
        self.f_name = f_name
        self.l_name = l_name
        self.coins = coins
        self.crystals = crystals
        self.update_rating()
        if grades:
            self.grades = grades
            for grade in grades:
                self.coins += self.grade_to_coins(grade)
        else:
            self.grades = list()

    def update_rating(self):
        self.rating = self.coins + self.crystals

    def grade_to_coins(self, grade: int):
        coins = 0
        if grade <= 8:
            coins = 1
        elif grade == 9:
            coins = 2
        elif grade == 10:
            coins = 3
        elif grade == 11:
            coins = 4
        elif grade == 12:
            coins = 5
        return coins

    def check_grade(self, grade: int):
        return 1 <= grade and grade <= 12

    def add_grade(self, grade: int):
        is_success = False
        if self.check_grade(grade):
            self.grades.append(grade)
            coins = self.grade_to_coins(grade)
            self.coins += coins
            self.update_rating()
            is_success = True
        return is_success

    def change_grade(self, index: int, grade: int):
        is_success = False
        if self.check_grade(grade) and index < len(self.grades):
            coins = self.grade_to_coins(self.grades[index])
            self.coins -= coins
            self.update_rating()
            self.grades[index] = grade
            coins = self.grade_to_coins(grade)
            self.coins += coins
            self.update_rating()
            is_success = True
        return is_success

    def remove_grade(self, index: int):
        is_success = False
        if index < len(self.grades):
            coins = self.grade_to_coins(self.grades[index])
            self.coins -= coins
            self.update_rating()
            del self.grades[index]
            is_success = True
        return is_success

# ===================================================================


def print_all_students(students: list[ITStepStudent]):
    for student in students:
        print_student(student)
        print("================================")


def print_student(student: ITStepStudent):
    print(f"Username: {student.login}\t\tName: {student.f_name}\t\tSurname: {student.l_name}")
    print(f"{student.coins} coins, {student.crystals} crystals. Rating: {student.rating}")
    print(student.grades)


def show_main_menu():
    print("1. Показать всех студентов")
    print("2. Выбрать студента по логину")
    print("3. Добавить студента")
    print("4. Удалить студента")
    print("5. Завершить программу")


def show_student_menu():
    print("1. Добавить оценку")
    print("2. Изменить оценку")
    print("3. Удалить оценку")
    print("4. Изменить логин")
    print("5. Изменить имя")
    print("6. Изменить фамилию")
    print("7. Добавить кристалл")
    print("8. Вернуться")


student_list = [ITStepStudent("Teston_xyz", "Teston", "Lebra", grades=[12, 7, 9]),
                ITStepStudent("Abc_5869", "Tom", "Jackson", grades=[9, 8, 8]),
                ITStepStudent("AT_red", "Astrid", "Hofferson", grades=[12, 12, 12])]


def find_student_by_login(student_login: str):
    index = -1
    for i in range(len(student_list)):
        if student_list[i].login == student_login:
            index = i
            break
    return index


def select_student(student_login: str):
    i = find_student_by_login(student_login)
    while i != -1:
        student = student_list[i]
        print_student(student)
        print("=================================")
        show_student_menu()
        choice = input("Выберите действие: ")
        if choice == "1":
            print("=================================")
            input_grade = int(input("Введите оценку от 1 до 12 включительно: "))
            is_success = False
            if student.check_grade(input_grade):
                student.grades.append(input_grade)
                coins = student.grade_to_coins(input_grade)
                student.coins += coins
                is_success = True
            if is_success:
                print("Оценка добавлена")
            else:
                print("Оценка должна быть от 1 до 12 включительно.")
            print("=================================")
        elif choice == "2":
            print("=================================")
            index = int(input("Введите номер оценки: ")) - 1
            input_grade = int(input("Введите оценку от 1 до 12 включительно: "))
            is_success = False
            if student.check_grade(input_grade) and index < len(student.grades):
                coins = student.grade_to_coins(student.grades[index])
                student.coins -= coins
                student.grades[index] = input_grade
                coins = student.grade_to_coins(input_grade)
                student.coins += coins
                is_success = True
            if is_success:
                print("Оценка изменена.")
            else:
                print("Оценка или номер оценки указаны неверно.")
            print("=================================")
        elif choice == "3":
            print("=================================")
            index = int(input("Введите номер оценки: ")) - 1
            is_success = False
            if index < len(student.grades):
                del student.grades[index]
                is_success = True
            if is_success:
                print("Оценка удалена.")
            else:
                print("Номер оценки указан неверно.")
            print("=================================")
        elif choice == "4":
            print("=================================")
            input_login = input("Введите логин: ")
            if find_student_by_login(input_login) == -1:
                student.login = input_login
                print("Логин изменён.")
            else:
                print("Введённый логин уже занят. Введите другой.")
            print("=================================")
        elif choice == "5":
            print("=================================")
            input_f_name = input("Введите имя: ")
            student.f_name = input_f_name
            print("Имя изменено.")
            print("=================================")
        elif choice == "6":
            print("=================================")
            input_l_name = input("Введите фамилию: ")
            student.l_name = input_l_name
            print("Фамилия изменена.")
            print("=================================")
        elif choice == "7":
            print("=================================")
            input_crystal = int(input("Введите количество кристаллов: "))
            student.crystals += input_crystal
            student.update_rating()
            print("Кристаллы добавлены.")
            print("=================================")
        elif choice == "8":
            break


def add_student(student: ITStepStudent):
    is_success = False
    if find_student_by_login(student.login) == -1:
        student_list.append(student)
        is_success = True
    return is_success


def remove_student(student_login):
    is_success = False
    index = find_student_by_login(student_login)
    if index != -1:
        del student_list[index]
        is_success = True
    return is_success


while True:
    show_main_menu()
    choice = input("Выберите действие: ")
    if choice == "1":
        print("=================================")
        print_all_students(student_list)
    elif choice == "2":
        print("=================================")
        input_login = input("Введите логин: ")
        select_student(input_login)
        print("=================================")
    elif choice == "3":
        print("=================================")
        input_login = input("Введите логин: ")
        input_f_name = input("Введите имя: ")
        input_l_name = input("Введите фамилию: ")
        new_student = ITStepStudent(input_login, input_f_name, input_l_name)
        if add_student(new_student):
            print("Студент добавлен")
        else:
            print("Ошибка добавления. Указанный логин уже есть у другого студента.")
        print("=================================")
    elif choice == "4":
        print("=================================")
        input_login = input("Введите логин: ")
        if remove_student(input_login):
            print("Студент успешно удалён.")
        else:
            print("Студента с указанным логином не найден.")
        print("=================================")
    elif choice == "5":
        print("=================================")
        print("Завершение программы.")
        break