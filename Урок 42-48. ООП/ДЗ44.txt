Задание 44.1
Использование инкапсуляции


Задание 44.2
Использование класса из 44.1


Задание 44.3
Использование наследования


Задание 44.4
Использование класса из 44.3


Задание 44.5
Создать классы, чтобы работал следующее использование.


Задание 44.6
Teston Lebra описал класс, но нарушил инкапсуляцию. Переделайте весь его код так, чтобы инкапсуляция не нарушалась.




Задание 1.
Создайте класс "Сотрудник". Укажите в нём поля "Имя", "Номер сотрудника".
Определите для класса конструктор и строковое представление, а также свойства.

Используя механизм наследования, создайте класс "Рабочий". Укажите в нём поля "Номер смены" (целое число, 1 - дневная, 2 - вечерняя), "Почасовая ставка".
Определите для класс конструктор и строковое представление, а также свойства.

Используя эти классы создайте программу, которая запрашивает из консоли данные для рабочего и создаёт объект этого класса.
После этого выведите данные объекта в консоль, используя свойства.
Здесь класс "Сотрудник" используется ТОЛЬКО для создания класса "Рабочий".


Задание 2.
Создайте класс "Клиент". Укажите в нём поля "Идентификатор", "Имя", "Фамилия", "Баланс".
Определите для класса конструктор, строковое представление и свойства.
Реализуйте методы пополнения баланса и снятия баланса. Методы должны возвращать булевые значения - True в случае успешного выполнение и False в противном случае.

Используя созданный класс реализуйте следующую программу:
Реализовать следующее меню:
1. Показать список клиентов
2. Добавить нового клиента
3. Удалить клиента по идентификатору
4. Изменить данные клиента по идентификатору
5. Завершить программу

Программа должна завершаться только если выбран пункт 5.

При выборе пункта 2 программа запрашивает ввод из консоли идентификатора, имени, фамилии и баланса.
Потом создаёт объект класса "Клиент" из этих данных и помещает объект в список.
ДОПОЛНИТЕЛЬНО: Сделайте так, чтобы невозможно было добавить клиента, идентификатор которого уже есть в списке у какого-либо клиента.

При выборе пункта 3 программа запрашивает ввод из консоли идентификатора.
Если клиента с таким идентификатором нет, то программа сообщает об этом в консоли.
Если клиент есть, то программа удаляет из списка этого клиента и сообщает об этом в консоли.

При выборе пункта 4 программа запрашивает ввод из консоли идентификатора.
Если клиента с таким идентификатором нет, то программа сообщает об этом в консоли.
Если клиент есть, то программа сперва выводит в консоль этого клиента, а потом запрашивает ввод из консоли
идентификатора, имени, фамилии и баланса. Если вводить пустые данные, то программа не проводит изменения для этих полей.
ДОПОЛНИТЕЛЬНО: Сделайте так, чтобы невозможно было изменить клиенту идентификатор на тот, который уже есть в списке у какого-либо клиента.




Создайте класс "Банковская карта". Укажите в нём поля "Имя", "Фамилия", "Номер карты", "Месяц до", "Год до", "CVV/CVC",
"Баланс".
Определите для класса метод __str__, а также конструктор __init__.
Определите для класса метод пополнения баланса и метод снятия с баланса.

Метод пополнения баланса принимает сумму.
Если она отрицательная, то метод возвращает False.
В противном случае метод пополняет баланс на указанную сумму и возвращает True.

Метод снятия с баланса принимает сумму.
Если она отрицательная или превышает текущий баланс, то метод возвращает False.
В противном случае метод снимает с баланса сумму и возвращает True.

После описания этого класса протестируйте этот класс, а именно пополнение и снятие.
При проверке учтите разные случаи.


Задание 2.
Создайте класс "Игрок". Укажите в нём поля "Идентификатор", "Никнейм", "Рейтинг", "Количество побед", "Количество поражений".
Определите для класса метод __str__, а также конструктор __init__.
Определите для класса следующие методы:
Метод засчитывания победы - метод должен увеличивать рейтинг на 3 единицы и увеличивать счётчик побед на 1.
Метод засчитывания поражения - метод должен уменьшать рейтинг на 10 единиц и увеличивать счётчик поражений на 1.
Метод, который определяет соотношение побед/поражений - метод должен возвращать соотношение побед/поражений.

После описания этого класса протестируйте этот класс, а именно засчитывание победы, засчитывание поражения и соотношение побед/поражений.
При проверке учтите разные случаи.


Задание 3.
Создайте класс "Студент ITStep". Укажите в нём поля "Логин", "Имя", "Фамилия", "Отчество", "Монетки", "Кристаллы", "Рейтинг", "Список оценок".
Определите для класса метод __str__, а также конструктор __init__.
Определите для класса следующие методы:
Метод добавления оценки в список оценок - метод возвращает True, если была добавлена оценка от 1 до 12 включительно, и False в противном случае.
                                          При добавлении оценки должны увеличиваться кристаллы на 1 и монетки, а также изменяться рейтинг.
                                          Монетки добавляются по правилу: 
                                          - до 8 баллов включительно это 1 монетка
                                          - 9 баллов это 2 монетки
                                          - 10 баллов это 3 монетки
                                          - 11 баллов это 4 монетки
                                          - 12 баллов это 5 монеток
                                          К рейтингу просто добавляются монетки и кристаллы.

Метод оплаты предмета - метод возвращает True, если оплата была проведена успешно, и False в противном случае.
                        Сделать так, чтобы метод принимал число от 1 до 3 включительно.
                        Для числа 1 метод должен отнимать из монеток и кристаллов 50 единиц.
                        Для числа 2 метод должен отнимать из монеток и кристаллов 200 единиц.
                        Для числа 3 метод должен отнимать из монеток и кристаллов 500 единиц.

Метод вычисления средней оценки - метод возвращает среднюю оценку по списку оценок.


После описания этого класса протестируйте этот класс, а именно добавление оценки, оплату предмета и вычисление средней оценки.
При проверке учтите разные случаи.